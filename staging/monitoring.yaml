heat_template_version: 2013-05-23

description: |
  Test template using Cloud Monitoring

resources:

  server:
    type: OS::Nova::Server
    properties:
      image: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      flavor: 2 GB Performance
      name: { get_param: "OS::stack_name" }
      user_data_format: RAW
      config_drive: true
      user_data: |
        #!/bin/bash
        echo "deb http://stable.packages.cloudmonitoring.rackspace.com/ubuntu-14.04-x86_64 cloudmonitoring main" > /etc/apt/sources.list.d/rackspace-monitoring-agent.list
        curl https://monitoring.api.rackspacecloud.com/pki/agent/linux.asc | sudo apt-key add -
        apt-get -y update
        apt-get -y install rackspace-monitoring-agent apache2
        echo "monitoring_id $(ls /var/lib/cloud/instances/)" >> /etc/rackspace-monitoring-agent.cfg
        echo "monitoring_token 5aac49d84269b4da472d8a620093b37d9f81bea97bb041ed4d81db471afbdabe.897686" >> /etc/rackspace-monitoring-agent.cfg
        service rackspace-monitoring-agent restart
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }

  ######################################################################################
  # THIS TEMPLATE USES THE SERVERMILL CREATED ENTITY FOR CHECKS AND STUFF. JUST CREATE #
  # THIS ENTITY TO ENSURE THAT THE ENTITY RESOURCE WORKS.                              #
  ######################################################################################
  entity:
    type: Rackspace::CloudMonitoring::Entity
    properties:
      label: { get_param: "OS::stack_name" }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      ip_addresses:
        web_server: { get_attr: [ server, accessIPv4 ] }

  webcheck:
    type: Rackspace::CloudMonitoring::Check
    properties:
      entity: { get_resource: server }
      type: remote.http
      details:
        url:
          str_replace:
            template: http://server_ip/
            params:
              server_ip: { get_attr: [ server, accessIPv4 ] }
      label: webcheck
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      target_hostname: { get_attr: [ server, accessIPv4 ] }
      target_receiver: IPv4

  cpucheck:
    type: Rackspace::CloudMonitoring::Check
    properties:
      entity: { get_resource: server }
      type: agent.cpu
      label: cpu_check
      details: {}
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10

  email_notification:
    type: Rackspace::CloudMonitoring::Notification
    properties:
      label: email_heat_team
      type: email
      details:
        address: "rs-heat@lists.rackspace.com"

  notify_heat_team:
    type: Rackspace::CloudMonitoring::NotificationPlan
    properties:
      label: heat_notification_plan
      ok_state:
      - { get_resource: email_notification }
      warning_state:
      - { get_resource: email_notification }
      critical_state:
      - { get_resource: email_notification }

  alert_randall:
    type: Rackspace::CloudMonitoring::Alarm
    properties:
      label: test_cpu_alarm
      check: { get_resource: cpucheck }
      plan: { get_resource: notify_heat_team }
      criteria: |
        :set consecutiveCount=5
        if (metric['usage_average'] > 95) {
            return new AlarmStatus(CRITICAL, 'CPU usage is #{usage_average}%');
        }
        if (metric['usage_average'] > 85) {
            return new AlarmStatus(WARNING, 'CPU usage is #{usage_average}%');
        }
        return new AlarmStatus(OK);
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }

      


      
      
    